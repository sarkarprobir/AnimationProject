@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@section scripts {
        
    <script src="~/js/animation_min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="~/js/animationhorizontal.js?v=@Configuration["AppSettings:FilesVersion"]"></script>
        <script src="~/js/HorizontalScript.js?v=@Configuration["AppSettings:FilesVersion"]"></script>
    <link href="https://fonts.googleapis.com/css2?family=Lobster&family=Nunito+Sans:ital,opsz,wght@0,6..12,200..1000;1,6..12,200..1000&family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
          rel="stylesheet">
    <link href="~/css/animate/animate.min.css" rel="stylesheet">
    <link href="~/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src='https://code.jquery.com/jquery-3.2.1.slim.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js'></script>
    <script src="~/js/wow.min.js"></script>
    <link href="~/css/HorizontalStyle.css" rel="stylesheet">
    <link href="~/css/canvas.css" rel="stylesheet">
    <link href="~/css/responsive.css" rel="stylesheet">
    <link href="~/css/style.css" rel="stylesheet">

}

<script>
      $(document).ready(function(){
      (async () => {
        try {
                const savedHtml = sessionStorage.getItem("leftPanelHtml");
        let leftPanelPromise;
        if (savedHtml) {
          document.getElementById("divpanelleftH").innerHTML = savedHtml;
          sessionStorage.removeItem("leftPanelHtml"); // optional cleanup
          leftPanelPromise = Promise.resolve(); // no async work needed
        } else {
          // Make sure CreateLeftSectionhtml returns a Promise
          leftPanelPromise = CreateLeftSectionHorizontalhtml();
        }
          // 1) Load all four panels in parallel
          await Promise.all([
              leftPanelPromise,
               CreateRightSectionHorizontalhtml(),
            CreateHeaderSectionHorizontalhtml(),
            CreateBackgroundSectionHorizontalhtml(),
            CreateLeftSectionHorizontalhtml(),
           // CreateRightSectionHorizontalhtml()
            //CreateLeftSectionhtml()

          ]);

              // await Promise.all([
              //   CreateLeftSectionhtml(),
              //   CreateRightSectionhtml(),
              //   CreateHeaderSectionhtml(),
              //   CreateBackgroundSectionhtml()

              // ]);
          await document.fonts.ready;

          // 3) Now your controls can be initialized
          $("#hdnlLoopControl").val(1);
          $("#hdnfillColor").val('#42b3f5');
          $("#hdnStrockColor").val('#78f542');
         // document.getElementById("modeButton").innerText = "Graphic Mode";

          // 4) Pull the `id` from the URL and initialize your canvas
          const params = new URLSearchParams(window.location.search);
          const id     = params.get('id');
          if (id) {
            GetDesignBoardById(id);

            // Wire up your custom context‑menu
            // const canvas      = document.getElementById("myCanvas");
            // const contextMenu = document.getElementById("contextMenu");
            canvas.addEventListener("contextmenu", e => {
              e.preventDefault();
              const rect    = canvas.getBoundingClientRect();
              const offsetX = e.clientX - rect.left;
              const offsetY = e.clientY - rect.top;

              const found = getObjectAtcontextmenu(offsetX, offsetY);
              if (found) {
                const adjustX = 280, adjustY = 64;
                selectedForContextMenu = found.obj;
                selectedType           = found.type;
                contextMenu.style.left    = (offsetX + adjustX) + "px";
                contextMenu.style.top     = (offsetY + adjustY) + "px";
                contextMenu.style.display = "block";
              } else {
                contextMenu.style.display = "none";
              }
            });
          }

          // 5) Optionally auto‑open the modal
          if (params.get('openModal') === 'true') {
            const modalEl = document.getElementById('exampleModal');
            new bootstrap.Modal(modalEl).show();
          }
        }
        catch (err) {
          console.error("Initialization failed:", err);
          // fallback: at least try to draw board even if fonts or panels didn't load
          const fallbackId = new URLSearchParams(window.location.search).get('id');
          if (fallbackId) GetDesignBoardById(fallbackId);
        }
      })();
    });

        const buttons = document.querySelectorAll('.toggle-btn');

        buttons.forEach(button => {
          button.addEventListener('click', () => {
            buttons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
          });
        });
        async function DeleteSlide() {
            try {
                // const confirmDelete = confirm("Do you want to delete this slide?");
                const confirmDelete = await customConfirm("Do you want to delete slide-"+activeSlide+"?");
            if (!confirmDelete) return;

                     let slideId;
            if (activeSlide === 1) {
                    slideId = $(`#hdnDesignBoardDetailsIdSlide1`).val();
            } else if (activeSlide === 2) {
                    slideId = $(`#hdnDesignBoardDetailsIdSlide2`).val();
                }else if (activeSlide === 3) {
                        slideId = $(`#hdnDesignBoardDetailsIdSlide3`).val();
                }

            // Check for blank, undefined, or default GUID
            const isDefaultOrBlank = !slideId || slideId.trim() === "" || slideId === "00000000-0000-0000-0000-000000000000";

            if (isDefaultOrBlank) {
                // Delete only the in-memory saved JSON based on activeSlide
                if (activeSlide === 1) {
                    verticalSlide1 = "";
                } else if (activeSlide === 2) {
                    verticalSlide2 = "";
                } else if (activeSlide === 3) {
                    verticalSlide3 = "";
                }

                    MessageShow('RedirectToHorizontalPageWithQueryString()', 'Slide deleted from memory.', 'success');
                return;
            }

            // If slideId is valid, continue with server delete
            ShowLoader();

            const dataSlide = {
                DesignBoardDetailsId: slideId
            };

            $.ajax({
                url: baseURL + "Canvas/DeleteDesignSlideBoard",
                type: "POST",
                dataType: "json",
                data: dataSlide,
                success: function (slideResult) {
                    HideLoader();
                    if (slideResult.response === 'ok') {
                        MessageShow('RedirectToHorizontalPageWithQueryString()', 'Slide deleted successfully!', 'success');
                    } else {
                        MessageShow('', 'Failed to delete slide.', 'error');
                    }
                },
                error: function (data) {
                    console.log("Error in delete slide", data);
                    HideLoader();
                    MessageShow('', 'Error deleting slide.', 'error');
                }
            });

        } catch (e) {
            console.log("catch", e);
            HideLoader();
        }
        }

     async function DuplicateSlide()
        {
             // const confirmduplicate = confirm("Do you want to duplicate "+activeSlide+" slide?");
                 const confirmduplicate = await customConfirm("Do you want to duplicate slide-"+activeSlide+"?");
                    if (!confirmduplicate) return;

            if($(`#hdnDesignBoardDetailsIdSlide3`).val() !=='')
            {
                    MessageShow('', 'Already 3 slide created.Delete any one and then duplicate!', 'error');
                        return;
            }
        let DesignBoardDetailsId;
        if (activeSlide === 1) {
            DesignBoardDetailsId = $(`#hdnDesignBoardDetailsIdSlide1`).val();
        } else if (activeSlide === 2) {
            DesignBoardDetailsId = $(`#hdnDesignBoardDetailsIdSlide2`).val();
        }

            const isDefaultOrBlank = !DesignBoardDetailsId || DesignBoardDetailsId.trim() === "" || DesignBoardDetailsId === "00000000-0000-0000-0000-000000000000";

        if (!isDefaultOrBlank) {
            try {
            ShowLoader();
            const dataSlide = {
                    DesignBoardDetailsId: DesignBoardDetailsId
            };

            $.ajax({
                url: baseURL + "Canvas/DuplicateDesignSlideBoard",
                type: "POST",
                dataType: "json",
                data: dataSlide,
                success: function (slideResult) {
                    HideLoader();
                    if (slideResult.response === 'ok') {
                        MessageShow('RedirectToHorizontalPageWithQueryString()', 'Slide duplicate successfully!', 'success');
                    } else {
                        MessageShow('', 'Failed to duplicate slide.', 'error');
                    }
                },
                error: function (data) {
                    console.log("Error in delete slide", data);
                    HideLoader();
                    MessageShow('', 'Error duplicate slide.', 'error');
                }
            });

        } catch (e) {
            console.log("catch", e);
            HideLoader();
        }
        }
        }
        //  $(document).on('click', '#toggle_img', function(e) {
        //   e.preventDefault();
        //   CreateBackgroundSectionHorizontalhtml();
        //   $('#background_popup').show();
        //   $('#fontstyle_popup').hide();
        //   $('#opengl_popup').hide();
        //   $('#elementsPopup').hide();
        //   $('#tranPopup').hide();
        // });
</script>

    

<div class="text-center" style="position:relative">

    <nav class="navbar bg-dark-topnav navbar-expand-lg fixed-top">
        <div class="container-fluid p-r-0" style="justify-content: center !important;">
            <div class="row" id="divHeaderSectionH">

            </div>
        </div>
    </nav>
    <img src="/images/stripe.svg"
     id="transition1"
     data-color="#d6d61e"
     style="display:none"
     data-width="210" />
<input type="hidden" id="hdnTransition1" />
<input type="hidden" id="hdnTransition2" />
<img src="/images/stripe2.svg"
     id="transition2"
     data-color="#1ed633"
     data-width="300"
     style="display:none" />
<input type="hidden" id="hdntransition" />
    <!-- Modal Structure -->
    <div class="modal fade layout_modal" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="background-color: rgba(36, 7, 136, 0.49) !important;">
        <div class="modal-dialog">
            <div class="modal-content p-3">
                <div class="modal-header">
                    <h5 class="modal-title" id="aniBoardModalLabel">New AniBoard</h5>
                </div>

                <div class="modal-body">
                    <!-- Vertical Option -->
                    <div class="option-box d-flex justify-content-between align-items-center mb-2" id="vertical-option">
                        <div class="d-flex align-items-center">
                            <div class="portrait-icon"></div>
                            <span class="vertical_option">Vertical / Portrait</span>
                        </div>
                        <span>1080x1920</span>
                    </div>

                    <!-- Horizontal Option -->
                    <div class="option-box d-flex justify-content-between align-items-center" id="horizontal-option">
                        <div class="d-flex align-items-center">
                            <div class="landscape-icon"></div>
                            <span>Horizontal / Landscape</span>
                        </div>
                        <span>1920x1080</span>
                    </div>

                   
                </div>

                <div class="modal-footer pt-0">
                    <button type="button" class="cancel-btn" data-bs-dismiss="modal">Cancel</button>
                    <button class="create-btn" id="create-button">Create</button>
                </div>
            </div>
        </div>
    </div>
    <!-- The Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <a href="#">
                        <img src="https://cdn-icons-png.flaticon.com/512/747/747376.png" class="icon">
                        My account
                    </a>
                    <a href="#">
                        <img src="https://cdn-icons-png.flaticon.com/512/126/126467.png" class="icon">
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </div>
     <!-- Modal for preview board design-->
    <div class="play_modal_body" style="display:none;">
        <div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true" >
            <div class="modal-dialog">
                <div class="modal-content">

                    <button type="button" class="btn-close play_modal_btn" data-bs-dismiss="modal" aria-label="Close"></button>
                    <input type="hidden" id="hdnBackgroundSpecificColor" />
                    <input type="hidden" id="hdnBackgroundSpecificColorDownload" />
                    <input type="hidden" id="hdnPublishBoardUniqueId" />
                    <input type="hidden" id="hdnDesignBoardPublishId" />
                    <div class="modal-body">
                        <canvas id="myCanvasElement"
                                class="clsmyCanvas"
                                width="380"
                                height="680"
                                style="background: lightgray; display: block; width: 380px; height: 680px; position: relative;">
                        </canvas>

                    </div>

                </div>
            </div>
        </div>
    </div>
     <!-- Modal Structure -->
    <div class="modal fade layout_modal" id="downloadModal" tabindex="-1" aria-labelledby="downloadModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content downloadModal-content p-3">
                <div class="modal-header">
                    <h5 class="modal-title" id="aniBoardModalLabel">Link</h5>
                    <button type="button" class="btn-cross b-radius-6 tab cross download-cross_btn" data-bs-dismiss="modal">x</button>
                </div>

                <div class="modal-body text-start">
                    <p class="fileName" id="designBoardName"></p>
                    <div class="fileLink">
                        <span class="aniLink" id="designboardLink"></span> 
                        <button class="copy-link-btn ms-2" onclick="copyLink(this)"><i class="fa-regular fa-copy"></i></button>
                    </div>

                </div>

                @* <div class="modal-footer pt-0">
                    <button type="button" class="cancel-btn" data-bs-dismiss="modal">Cancel</button>
                    <button class="create-btn" id="create-button">Create</button>
                </div> *@
            </div>
        </div>
    </div>

    <div id="canvasMainContainerDownload" class="d-flex align-items-stretch main-canvas-content hidden">
        <div class="panel-left"></div>
     
                    <input type="hidden" id="hdnPublishBoardUniqueId" />
                    <input type="hidden" id="hdnDesignBoardPublishId" />
        <div id="canvasContainerDownload" class="panel-middle d-flex align-items-center justify-content-center hidden">
            <canvas id="myCanvasElementDownload" class="clsmyCanvas"></canvas>
        </div>

        <div class="panel-right content"></div>
    </div>

    <div class="d-flex align-items-stretch   main-canvas-content mt-0">
        <div class="panel-left " id="divpanelleftH">

        </div>
        <div class="panel-middle d-flex align-items-center justify-content-center" id="canvasContainer">
            <div class="canvas-top-btn">
                <div class="toggle-container">
                    <button class="toggle-btn" data-mode="graphic">Graphic</button>
                    <button class="toggle-btn active" data-mode="animation">Animation</button>
                </div>

            </div>
            <canvas  id="myCanvas"></canvas>
            <div id="contextMenu">
                <ul>
                    <li class="context-options" id="copyOption">Copy</li>
                    <li class="context-options" id="pasteOption">Paste</li>
                    <li class="context-options" id="duplicateOption">Duplicate</li>
                    <li class="context-options" id="bringFrontOption">Bring Front</li>
                    <li class="context-options" id="sendBackOption">Send Back</li>
                    <li class="context-options" id="deleteOption">Delete</li>
                </ul>
            </div>

              <p class="middle-resulation">Final Output 1920x1080</p>
             @*  zoom div *@
            <div class="zoom_scale">
                <button onclick="zoomOut()">-</button>
                <span id="scaleValue">Scale: 1</span>
                <button onclick="zoomIn()">+</button>
            </div>
            @*  zoom div *@
            <textarea wrap="hard" style="display:none;" id="textEditor"></textarea>
        </div>

        <div class="panel-right content" id="divpanelrightH">
           
        </div>
    </div>
</div>
<!-- Modal Structure -->
<div class="modal fade layout_modal" id="downloadModal" tabindex="-1" aria-labelledby="downloadModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content downloadModal-content p-3">
            <div class="modal-header">
                <h5 class="modal-title" id="aniBoardModalLabel">Link</h5>
                <button type="button" class="btn-cross b-radius-6 tab cross download-cross_btn" data-bs-dismiss="modal">x</button>
            </div>

            <div class="modal-body text-start">
                <p class="fileName"> File : Sunday Adboard v01</p>
                <div class="fileLink">
                    <span class="aniLink">https://aniboard.com/v20560</span>
                    <button class="copy-link-btn ms-2" onclick="copyLink(this)"><i class="fa-regular fa-copy"></i></button>
                </div>

            </div>

            @* <div class="modal-footer pt-0">
                    <button type="button" class="cancel-btn" data-bs-dismiss="modal">Cancel</button>
                    <button class="create-btn" id="create-button">Create</button>
                </div> *@
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>